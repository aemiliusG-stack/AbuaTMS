var crt_dtTable, globalGetUrl = "/HttpClientMaster/ApiCallGet", globalPostUrl = "/HttpClientMaster/ApiCallPost";
function GetFileName(t) {
    var e = ""; return "" == (e = $(t).attr("data-file-name")) &&
        (e = $("#mainpagetitle").html()), e
}
function GetFullDateTime(t, e) {
    try {
        if (null == t || "" == t) return ""; var n,
            a = (n = 0 == e ? new Date(t) : new Date(t).addMinutes(crt_TimeZoneInterval)).getMinutes(), i = n.getHours(), o = n.getFullYear(), r = n.getMonth() + 1, l = ("0" + n.getDate()).slice(-2) + "/" + ("0" + r).slice(-2) + "/" + o + " " + ("0" + i).slice(-2) + ":" + ("0" + a).slice(-2); return l.indexOf("aN") > -1 ? t : l
    } catch (e) { return t }
} function GetIndiaFormatDateOnly(t, e)
{
    try {
        if (null == t || "" == t) return ""; (n = 0 == e ? new Date(t) : new Date(t).addMinutes(crt_TimeZoneInterval)).getMinutes(),
            n.getHours(); var n, a = n.getFullYear(), i = n.getMonth() + 1, o = ("0" + n.getDate()).slice(-2) + "/" + ("0" + i).slice(-2) + "/" + a; return o.indexOf("aN") > -1 ? t : o
    } catch (e) { return t }
}
function GetTextBoxFormatDateOnly(t, e)
{
    try {
        if (null == t || "" == t) return "";
        (n = 0 == e ? new Date(t) : new Date(t).addMinutes(crt_TimeZoneInterval)).getMinutes(), n.getHours(); var n, a = n.getFullYear(), i = n.getMonth(), o = ("0" + n.getDate()).slice(-2) + "-" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][i] + "-" + a; return o.indexOf("aN") > -1 ? t : o
    } catch (e) { return t }
}
function NullFilter(t) { return null == t || "null" == t ? "" : t }
function CheckForDataListAutoFill()
{
    $(".crt_List_datatable").length > 0 && $(".crt_List_datatable").each((function ()
    { var t = $(this).attr("data-function-name"); "function" == typeof window[t] && (formok = window[t]()) })), $(".crt_DynamicFunctionExecution").length > 0 && $(".crt_DynamicFunctionExecution").each((function () { if ("true" == $(this).attr("data-updateon-save")) { var t = $(this).attr("data-function-name"); "function" == typeof window[t] && (formok = window[t]()) } }))
} function GetSumColumnIndexs(t) {
    var e = []; return $(t).find("tfoot th").each((function (t, n)
    { "true" == $(this).attr("data-sum-col") && e.push(t) })), e
} function ClearModelData(t) {
    var e = $(t).attr("data-target"); if (null != e)
    { var n = $(e).find("form"); $(n).find('input[type="text"]').val(""), $(n).find('input[type="number"]').val(""), $(n).find("select").val(""), $(n).find("textarea").val(""), $(n).find('input[type="checkbox"]').prop("checked", !0), $(n).find("#Id").val("0"), $(n).find('input[type="password"]').removeAttr("readonly").val(""), $(n).find("input").removeAttr("disabled") } $(".crt_heading-title").html("Add"), $("input[type=submit]").removeAttr("disabled"), IgnoreValidation()
}
function IgnoreValidation()
{
    var t = $(".crt_ajaxform"); t.validate().resetForm(),
        t.find("[data-valmsg-summary=true]").removeClass("validation-summary-errors").addClass("validation-summary-valid").find("ul").empty(), t.find("[data-valmsg-replace]").removeClass("field-validation-error").addClass("field-validation-valid").empty()
}
function SuccessNotification() { swal({ title: "Done!", text: "", type: "success" }) }
function SuccessNotificationWithMessage(t) { swal({ title: "Done!", text: t, type: "success" }) }
function WarningNotification() { swal({ title: "Warning!", text: "Error!!!", type: "warning" }) }
function WarningNotificationWithMessage(t) { swal({ title: "Warning!", text: t, type: "warning" }) }
function onAjaxRequestBegin() {
    swal({ title: "Please wait, It's working...", allowEscapeKey: !0, allowOutsideClick: !1, showCancelButton: !1, showConfirmButton: !1, imageUrl: "/images/loader3.gif" }), $("input[type=submit]").attr("disabled", "disabled")
}
function onAjaxRequestSuccess(t) {
    if (1 == t.IsSuccess) { if (SuccessNotification(), $("form.crt_ajaxform").length > 0) { $("form.crt_ajaxform").get(0).reset(); $("#Id").val(); $("#Id").val(0); var e = $("body").find(".modal:visible"); if (1 == e.length && $(e).modal("hide"), "true" == $("#Id").attr("data-reload-required")) { var n = window.location.pathname.split("/"); setTimeout((function () { window.location = "/" + n[1] + "/" + n[2] }), 1500) } } CheckForDataListAutoFill() } else onAjaxRequestAPIFailure(t.Message)
}
function onAjaxRequestSuccessNoReset(t) {
    1 == t.IsSuccess ? (SuccessNotificationWithMessage(t.Message), CheckForDataListAutoFill()) : onAjaxRequestAPIFailure(t.Message)
}
function onAjaxRequestComplete(){ setTimeout((function () { swal.close() }), 9500), $("input[type=submit]").removeAttr("disabled") }
function onAjaxRequestFailure(t, e, n) {
    var a = null, i = [], o = ""; if (400 == t.status || 406 == t.status || t.status > 400) try { a = JSON.parse(t.responseText) } catch (t) { } if (null != a) { var r = a.ModelState; for (var l in r) r.hasOwnProperty(l) && (o = ("" == o ? "" : o + "<br/>") + r[l], i.push(r[l])) } "" != o && WarningNotificationWithMessage(o)
} function onAjaxRequestAPIFailure(t) {
    "" != t && WarningNotificationWithMessage(t)
} function confirmDelete(t, e) {
    swal({ title: "Are you sure?", text: "You want to delete this record!", type: "warning", showCancelButton: !0, confirmButtonColor: "#DD6B55", confirmButtonText: "Yes, delete it!", closeOnConfirm: !1 }, (function (n) { if (n) { var a = "Id=" + e; $.ajax({ url: globalPostUrl, type: "POST", data: { APIUrl: t, FormBodyData: a, IsAuthenticated: !0 }, contentType: "application/x-www-form-urlencoded; charset=utf-8", success: function (t) { var e = JSON.parse(t); 1 == e.IsSuccess ? (CheckForDataListAutoFill(), swal({ title: "Done!", text: "It was succesfully deleted!", type: "success", timer: 2e3 })) : swal("Error deleting!", e.Message, "error") }, error: function (t, e, n) { swal("Error deleting!", "Please try again", "error") } }) } }))
} function ActiveLabelHtml(t) {
    var e = '<span class="label label-danger">' + t + "</span>"; return t && (e = '<span class="label label-success">' + t + "</span>"), e
} function EditListActionHtml(t, e) {
    return '<a class="mr-2 btn btn-primary btn-xs" href="javascript:' + e + "(" + t + ')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>'
} function DeleteListActionHtml(t, e) {
    return '<a class="mr-2 btn btn-danger btn-xs" href="javascript:' + e + "(" + t + ')"><i class="glyphicon glyphicon-trash"></i> Delete</a>'
} function LogoutUser() {
    $.ajax({ url: "/Account/Logout", type: "POST", contentType: "application/x-www-form-urlencoded; charset=utf-8", data: {}, success: function (t) { if (JSON.parse(t).IsSuccess) { var e = history.length; history.go(-e), window.location.replace("/") } }, error: function (t) { }, complete: function () { } })
} $((function () {
    $("form.crt_ajaxform").on("submit", (function (t) { t.preventDefault(); var e = $(this).attr("data-ajax-url"), n = ($(this).attr("data-ajax-method"), $(this).attr("data-ajax-begin")), a = $(this).attr("data-ajax-success"), i = $(this).attr("data-ajax-complete"), o = $(this).attr("data-ajax-failure"), r = globalPostUrl, l = $(this).serialize(); $(this).valid() && $.ajax({ url: r, type: "POST", contentType: "application/x-www-form-urlencoded; charset=utf-8", data: { APIUrl: e, FormBodyData: l, IsAuthenticated: !0 }, beforeSend: function () { "" != n && null != n && "function" == typeof window[n] && (formok = window[n]()) }, success: function (t) { var e = JSON.parse(t); "" != a && null != a && "function" == typeof window[a] && (formok = window[a](e)); if (-1 != e.Message.indexOf("Unauthorized")) { var n = history.length; history.go(-n), window.location.replace("/") } }, error: function (t) { "" != o && null != o && "function" == typeof window[o] && (formok = window[o](t)) }, complete: function () { "" != i && null != i && "function" == typeof window[i] && (formok = window[i]()) } }) })), $(".crt_List_datatable").length > 0 && $(".crt_List_datatable").each((function () { var t = $(this).attr("data-function-name"); "function" == typeof window[t] && (formok = window[t]()) })), $(".crt_DynamicFunctionExecution").length > 0 && $(".crt_DynamicFunctionExecution").each((function () { var t = $(this).attr("data-function-name"); "function" == typeof window[t] && (formok = window[t]()) })), $(".crt_List_datatable").length > 0 && ($.fn.dataTable.Buttons.defaults.dom.button.className = "btn btn-white btn-sm", $.extend($.fn.dataTable.defaults, { autoWidth: !1, responsive: !0, pageLength: 100, order: [], columnDefs: [{ orderable: !1 }], dom: '<"html5buttons"B>lTfgitp', buttons: [{ extend: "excel", title: GetFileName(".crt_List_datatable"), exportOptions: { columns: "thead th:not(.not-export)" } }], language: { search: "<span>Filter:</span> _INPUT_", searchPlaceholder: "Type to filter...", lengthMenu: "<span>Show:</span> _MENU_", paginate: { first: "First", last: "Last", next: "&rarr;", previous: "&larr;" } }, drawCallback: function () { $(this).find("tbody tr").slice(-3).find(".dropdown, .btn-group").addClass("dropup") }, preDrawCallback: function () { $(this).find("tbody tr").slice(-3).find(".dropdown, .btn-group").removeClass("dropup") }, footerCallback: function (t, e, n, a, i) { var o = this.api(), r = function (t) { return "string" == typeof t ? 1 * t.replace(/[\$,]/g, "") : "number" == typeof t ? t : 0 }; $(GetSumColumnIndexs(this[0])).each((function (t, e) { var n; n = o.column(e).data().reduce((function (t, e) { return r(t) + r(e) }), 0), $(o.column(e).footer()).html(n) })) } }), crt_dtTable = $(".crt_List_datatable").DataTable())
})), $("input[type='text']").blur((function () {
    var t = $(this).val(); $(this).val(t.trim())
})), $("input[type='number']").blur((function () {
    var t = $(this).val(); $(this).val(t.trim())
})), $("input[type='email']").blur((function () {
    var t = $(this).val(); $(this).val(t.trim())
})), $(document).on("keypress", ".number", (function (t) {
    if (8 != t.which && 0 != t.which && (t.which < 48 || t.which > 57)) return !1
})), $(document).on("keypress", ".decimal", (function (t) {
    var e = $(this).val(); 46 == t.which && -1 == e.indexOf(".") || !(t.which < 48 || t.which > 57) || 45 == t.which && 0 == element[0].selectionStart && -1 == e.indexOf("-") || 0 == t.which || 8 == t.which || t.preventDefault(), -1 != e.indexOf(".") && e.substring(e.indexOf(".")).length > 2 && element[0].selectionStart - element[0].selectionEnd == 0 && element[0].selectionStart >= element.val().length - 2 && (45 != t.which || 0 != element[0].selectionStart || -1 != e.indexOf("-")) && 0 != t.which && 8 != t.which && t.preventDefault()
})), $(".characters_only").keypress((function (t) {
    var e = t.which ? t.which : t.keyCode; if ((e < 65 || e > 90) && (e < 97 || e > 123) && 32 != e) return !1
})), $(".block_special_char").keypress((function (t) {
    var e = 0 == t.keyCode ? t.charCode : t.keyCode; return e >= 48 && e <= 57 || e >= 65 && e <= 90 || e >= 97 && e <= 122 || 95 == e || 32 == e || -1 != specialKeys.indexOf(t.keyCode) && t.charCode != t.keyCode
})), Date.prototype.addMinutes = function (t) { return this.setMinutes(this.getMinutes() + t), this };